#include "../incl/gm_run.h"

int run()
{
  int exit_code = ERR_GM_NO_ERROR;
  CApp * pApp = new CApp();
	Game_State state = load_menu;

	// Debug Mode?

  #if MODE == DEBUG_MODE
  	pApp->init_debug_log(8182);
		pApp->write_log("init_engine()", DB_MSG_HL);
	#endif
	
  // initialisiere das Spiel

	pApp->print_error("Intialisiere Engine...\n", (exit_code = pApp->init_engine("3D Fighter")));
    
	if(exit_code == ERR_EN_NO_ERROR)
	{
		// Lade Menü

		init_models_menu(pApp, $state);

		// initialisiere CPU Messgerät

    pApp->cpu_set_timestamp(SDL_GetTicks());
    pApp->cpu_set_timestep(pApp->cpu_get_timestamp() * 0.001);
		pApp->cpu_set_timestamp_prev();

		// Programmschleife

	  while(SDL_PollEvent(pApp->get_event()) || (exit_code == ERR_GM_NO_ERROR && state != end))
		{
			if(exit_code == ERR_GM_NO_ERROR) // von gm_update
			{
				exit_code = gm_draw(pApp, &state);
				
				if(exit_code == ERR_GM_NO_ERROR)
				{
					exit_code = gm_update(pApp, &state, pApp->get_poly_mode());

					// Prozessor messen

					pApp->cpu_set_timestamp_prev();
					pApp->cpu_set_timestamp(SDL_GetTicks());
					pApp->cpu_set_timestep((pApp->cpu_get_timestamp() - pApp->cpu_get_timestamp_prev()) * 0.001);
				}
			}
		}
	}
	else
	{
		#if MODE == DEBUG_MODE
			pApp->write_log("<b>GAME:</b> init_engine() fehlgeschlagen...", DB_MSG_ERR);
		#endif
	}

	// Debug Log?

	#if MODE == DEBUG_MODE
    pApp->create_log();
	#endif

	// Speicher zerlegen

	delete pApp;

  return exit_code;
}
